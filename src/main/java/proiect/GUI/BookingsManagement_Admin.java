/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package proiect.GUI;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.json.JSONObject;

import proiect.DatabaseTables.Bookings;
import proiect.DatabaseTables.Flights;
import proiect.Extra.ApiClient;
import org.json.JSONArray;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;


public class BookingsManagement_Admin extends javax.swing.JDialog {
    private static ApiClient apiClient;

    /**
     * Creates new form BookingsManagement_Admin
     */
    public BookingsManagement_Admin(java.awt.Frame parent, boolean modal, ApiClient apiClient) {
        super(parent, modal);
        BookingsManagement_Admin.apiClient = apiClient;
        initComponents();
        initializeRadioButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    private void initComponents() {
        searchBookingField = new JTextField();
        searchUserIDField = new JTextField();
        jRadioButton3 = new JRadioButton();
        JButton findBookingButton = new JButton();
        JLabel jLabel1 = new JLabel();
        jRadioButton1 = new JRadioButton();
        JLabel jLabel2 = new JLabel();
        bookingID_TextField = new JTextField();
        JLabel jLabel3 = new JLabel();
        flightID_TextField = new JTextField();
        JLabel jLabel4 = new JLabel();
        userID_TextField = new JTextField();
        JLabel jLabel5 = new JLabel();
        seat_TextField = new JTextField();
        JButton updateBookingButton = new JButton();
        JButton jButton1 = new JButton();
        JButton jButton2 = new JButton();
        JButton newBookingButton = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        var contentPane = getContentPane();

        //---- searchUserIDField ----
        searchUserIDField.addActionListener(this::searchUserIDFieldActionPerformed);

        //---- jRadioButton3 ----
        jRadioButton3.setText("User ID");
        jRadioButton3.addActionListener(this::jRadioButton3ActionPerformed);

        //---- findBookingButton ----
        findBookingButton.setText("Find booking");

        //---- jLabel1 ----
        jLabel1.setText("Search user by:");

        //---- jRadioButton1 ----
        jRadioButton1.setText("Booking ID");
        jRadioButton1.addActionListener(this::jRadioButton1ActionPerformed);

        //---- jLabel2 ----
        jLabel2.setText("Booking ID");

        //---- jLabel3 ----
        jLabel3.setText("Flight ID");

        //---- flightID_TextField ----
        flightID_TextField.addActionListener(this::flightID_TextFieldActionPerformed);

        //---- jLabel4 ----
        jLabel4.setText("User ID");

        //---- jLabel5 ----
        jLabel5.setText("Seat");

        //---- updateBookingButton ----
        updateBookingButton.setText("Update booking");

        //---- jButton1 ----
        jButton1.setText("See full flight details");

        //---- jButton2 ----
        jButton2.setText("Delete booking");
        jButton2.setForeground(Color.red);

        //---- newBookingButton ----
        newBookingButton.setText("New booking");
        jRadioButton1.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                clearFields();
            }
        });

        jRadioButton3.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                clearFields();
            }
        });

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
                contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                        .addGroup(contentPaneLayout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addContainerGap(613, Short.MAX_VALUE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                                .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addGroup(contentPaneLayout.createSequentialGroup()
                                                                .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(contentPaneLayout.createSequentialGroup()
                                                                                .addComponent(jRadioButton1)
                                                                                .addGap(132, 132, 132)
                                                                                .addComponent(searchBookingField, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                                                                .addGroup(contentPaneLayout.createParallelGroup()
                                                                                        .addComponent(jRadioButton3)
                                                                                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                                                                .addComponent(jLabel2, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                                .addComponent(findBookingButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                                        .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                                                                                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                                                                .addComponent(jLabel4, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                                .addComponent(jLabel3, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))
                                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(searchUserIDField, GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                                                                                        .addComponent(bookingID_TextField)
                                                                                        .addComponent(userID_TextField)
                                                                                        .addComponent(seat_TextField)
                                                                                        .addComponent(flightID_TextField))))
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(contentPaneLayout.createSequentialGroup()
                                                                .addComponent(newBookingButton, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                                                .addGap(58, 58, 58)
                                                                .addComponent(updateBookingButton, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                                                .addGap(87, 87, 87)
                                                                .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(37, 37, 37))))
        );
        contentPaneLayout.setVerticalGroup(
                contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                        .addComponent(jRadioButton1)
                                        .addComponent(searchBookingField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                        .addComponent(jRadioButton3)
                                        .addComponent(searchUserIDField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(findBookingButton)
                                .addGap(95, 95, 95)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                        .addComponent(jLabel2)
                                        .addComponent(bookingID_TextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                        .addComponent(jLabel3)
                                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButton1)
                                                .addComponent(flightID_TextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                        .addComponent(jLabel4)
                                        .addComponent(userID_TextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                        .addComponent(jLabel5)
                                        .addComponent(seat_TextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(updateBookingButton)
                                        .addComponent(jButton2)
                                        .addComponent(newBookingButton))
                                .addContainerGap(42, Short.MAX_VALUE))
        );
        findBookingButton.addActionListener(e -> {
            // Determine the search type
            String searchType;
            if (jRadioButton1.isSelected()) {
                searchType = "id";
            } else {
                searchType = "user";
            }

            // Retrieve the search term
            String searchTerm;
            if (searchType.equals("id")) {
                searchTerm = searchBookingField.getText();
            } else {
                searchTerm = searchUserIDField.getText();
            }
            // Construct the endpoint URL
            String endpoint = "http://localhost:8080/bookings/" + searchType + "/" + searchTerm;

            // Make the HTTP request
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .GET()
                    .build();
            try {
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

                if (response.statusCode() == 200) {
                    ObjectMapper mapper = new ObjectMapper();
                    mapper.registerModule(new JavaTimeModule());
                    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

                    JsonNode root = mapper.readTree(response.body());

                    if (root.isArray()) {
                        List<Bookings> bookingsList = mapper.readValue(response.body(), new TypeReference<>() {
                        });

                        if (bookingsList.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Booking not found");
                        } else if (bookingsList.size() == 1) {
                            Bookings booking = bookingsList.get(0);
                            bookingID_TextField.setText(String.valueOf(booking.getId()));
                            flightID_TextField.setText(String.valueOf(booking.getFlight().getId()));
                            userID_TextField.setText(String.valueOf(booking.getUser().getId()));
                            seat_TextField.setText(booking.getSeat());
                        } else {
                            showBookingSelectionDialog(bookingsList);
                        }
                    } else if (root.isObject()) {
                        Bookings booking = mapper.readValue(response.body(), Bookings.class);
                        bookingID_TextField.setText(String.valueOf(booking.getId()));
                        flightID_TextField.setText(String.valueOf(booking.getFlight().getId()));
                        userID_TextField.setText(String.valueOf(booking.getUser().getId()));
                        seat_TextField.setText(booking.getSeat());
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid response format");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Booking not found");
                }
            } catch (IOException | InterruptedException ex) {
                JOptionPane.showMessageDialog(null, "Error retrieving booking data");
                ex.printStackTrace();
            }
        });

        updateBookingButton.addActionListener(e -> {
            // Get the booking, flight, and user data from the form fields
            String bookingIdStr = bookingID_TextField.getText();
            String flightIdStr = flightID_TextField.getText();
            String userIdStr = userID_TextField.getText();
            String seat = seat_TextField.getText();

            // Validate form fields
            if (bookingIdStr.isEmpty() || flightIdStr.isEmpty() || userIdStr.isEmpty() || seat.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill in all required fields");
                return;
            }

            // Validate booking ID
            long bookingId;
            try {
                bookingId = Long.parseLong(bookingIdStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid booking ID. Please enter a valid number");
                return;
            }

            // Validate flight ID
            long flightId;
            try {
                flightId = Long.parseLong(flightIdStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid flight ID. Please enter a valid number");
                return;
            }

            // Validate user ID
            long userId;
            try {
                userId = Long.parseLong(userIdStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid user ID. Please enter a valid number");
                return;
            }

            // Construct the endpoint URL
            String endpoint = "http://localhost:8080/bookings/id/" + bookingId;

            // Create a JSON object with the updated field values
            JSONObject requestBody = new JSONObject();
            requestBody.put("flightId", flightId);
            requestBody.put("userId", userId);
            requestBody.put("seat", seat);

            System.out.println("Request Body: " + requestBody);

            // Make the HTTP request
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Content-Type", "application/json")
                    .PUT(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                    .build();

            try {
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

                if (response.statusCode() == 200) {
                    JOptionPane.showMessageDialog(null, "Booking updated successfully");
                } else if (response.statusCode() == 404) {
                    JOptionPane.showMessageDialog(null, "Booking not found");
                } else {
                    JOptionPane.showMessageDialog(null, "Error updating booking");
                }
            } catch (IOException | InterruptedException ex) {
                JOptionPane.showMessageDialog(null, "Error updating booking");
                ex.printStackTrace();
            }
        });

        jButton1.addActionListener(e -> {
            // Fetch the flight details from the backend.
            String flightId = flightID_TextField.getText();

            if (flightId != null && !flightId.isEmpty()) {
                String endpoint = "http://localhost:8080/flights/list/" + flightId;

                // Make the HTTP request
                HttpClient client = HttpClient.newHttpClient();
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(endpoint))
                        .GET()
                        .build();
                try {
                    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                    System.out.println("Response Code: " + response.statusCode());
                    System.out.println("Response Body: " + response.body());

                    if (response.statusCode() == 200) {
                        // Parse the response body
                        ObjectMapper mapper = new ObjectMapper();
                        mapper.registerModule(new JavaTimeModule());
                        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

                        Flights flight = mapper.readValue(response.body(), Flights.class);

                        // Format the date and duration
                        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
                        LocalDateTime departureTime = flight.getDepartureTime();
                        LocalDateTime arrivalTime = flight.getArrivalTime();
                        String formattedDepartureTime = departureTime.format(dateFormatter) + " " + departureTime.format(timeFormatter);
                        String formattedArrivalTime = arrivalTime.format(dateFormatter) + " " + arrivalTime.format(timeFormatter);

                        int durationMinutes = flight.getDuration();
                        int hours = durationMinutes / 60;
                        int minutes = durationMinutes % 60;
                        String formattedDuration = hours + " hours " + minutes + " minutes";

                        // Display the flight details in a JOptionPane.
                        JOptionPane.showMessageDialog(null, "Airline: " + flight.getAirline() + "\n"
                                + "Departure Airport: " + flight.getDepartureAirport().getName() + "\n"
                                + "Arrival Airport: " + flight.getArrivalAirport().getName() + "\n"
                                + "Departure Time: " + formattedDepartureTime + "\n"
                                + "Arrival Time: " + formattedArrivalTime + "\n"
                                + "Duration: " + formattedDuration + "\n"
                                + "Price: " + flight.getPrice() + " RON");
                    } else {
                        JOptionPane.showMessageDialog(null, "Flight not found");
                    }
                } catch (IOException | InterruptedException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error retrieving flight data");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a flight ID");
            }
        });

        jButton2.addActionListener(e -> {
            // Get the booking ID from the form field
            String bookingIdStr = bookingID_TextField.getText();

            // Validate booking ID
            if (bookingIdStr.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a booking ID");
                return;
            }

            long bookingId;
            try {
                bookingId = Long.parseLong(bookingIdStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid booking ID. Please enter a valid number");
                return;
            }

            // Show confirmation dialog
            int confirmed = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the booking?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (confirmed != JOptionPane.YES_OPTION) {
                return;
            }

            // Construct the endpoint URL
            String endpoint = "http://localhost:8080/bookings/delete/id/" + bookingId;

            // Make the HTTP request to delete the booking
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .DELETE()
                    .build();

            try {
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

                if (response.statusCode() == 200) {
                    JOptionPane.showMessageDialog(null, "Booking deleted successfully");
                } else if (response.statusCode() == 404) {
                    JOptionPane.showMessageDialog(null, "Booking not found");
                } else {
                    JOptionPane.showMessageDialog(null, "Error deleting booking");
                }
            } catch (IOException | InterruptedException ex) {
                JOptionPane.showMessageDialog(null, "Error deleting booking");
                ex.printStackTrace();
            }
        });
        newBookingButton.addActionListener(e -> {
            // Create a custom panel
            JPanel panel = new JPanel();
            panel.setLayout(new GridLayout(4, 2));

            // Add labels and text fields to the panel
            JLabel flightIdLabel = new JLabel("Flight ID:");
            JTextField flightIdField = new JTextField();
            JLabel userIdLabel = new JLabel("User ID:");
            JTextField userIdField = new JTextField();
            JLabel seatLabel = new JLabel("Seat:");
            JTextField seatField = new JTextField();

            panel.add(flightIdLabel);
            panel.add(flightIdField);
            panel.add(userIdLabel);
            panel.add(userIdField);
            panel.add(seatLabel);
            panel.add(seatField);

            // ActionListener for flight ID field
            flightIdField.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    Flight selectedFlight = showFlightSelectionPopup();
                    if (selectedFlight != null) {
                        flightIdField.setText(String.valueOf(selectedFlight.id()));
                    }
                }
            });

            // Create a custom dialog
            JDialog dialog = new JDialog((Frame) null, "New Booking", true);
            dialog.getContentPane().add(panel, BorderLayout.CENTER);

            // Create an "OK" button
            JButton okButton = new JButton("OK");
            okButton.addActionListener(actionEvent -> {
                // Get the input values from the text fields
                String flightIdStr = flightIdField.getText();
                String userIdStr = userIdField.getText();
                String seat = seatField.getText();

                // Validate flight ID
                long flightId;
                try {
                    flightId = Long.parseLong(flightIdStr);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid Flight ID. Please enter a valid number");
                    return;
                }

                // Validate user ID
                long userId;
                try {
                    userId = Long.parseLong(userIdStr);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid User ID. Please enter a valid number");
                    return;
                }

                // Construct the endpoint URL
                String endpoint = "http://localhost:8080/bookings/save";

                // Create a JSON object with the new booking data
                JSONObject requestBody = new JSONObject();
                requestBody.put("flightId", flightId);
                requestBody.put("userId", userId);
                requestBody.put("seat", seat);

                // Make the HTTP request to save the new booking
                HttpClient client = HttpClient.newHttpClient();
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(endpoint))
                        .header("Content-Type", "application/json")
                        .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                        .build();

                try {
                    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

                    if (response.statusCode() == 200) {
                        JOptionPane.showMessageDialog(null, "New booking saved successfully");
                        dialog.dispose(); // Close the dialog after successful booking
                    } else {
                        JOptionPane.showMessageDialog(null, "Error saving new booking");
                    }
                } catch (IOException | InterruptedException ex) {
                    JOptionPane.showMessageDialog(null, "Error saving new booking");
                    ex.printStackTrace();
                }
            });

            // Add the OK button to the panel
            panel.add(okButton);

            // Add the panel to the dialog
            dialog.getContentPane().add(panel);

            // Set the dialog size
            dialog.setSize(400, 200);

            // Center the dialog on the screen
            dialog.setLocationRelativeTo(null);

            // Show the dialog
            dialog.setVisible(true);
        });



        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents
    private void clearFields() {
        seat_TextField.setText("");
        bookingID_TextField.setText("");
        searchBookingField.setText("");
        flightID_TextField.setText("");
        userID_TextField.setText("");
        searchUserIDField.setText("");
    }

    private Flight showFlightSelectionPopup() {
        // Send a GET request to retrieve the list of flights
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:8080/flights/list/all"))
                .build();

        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                JSONArray flightsArray = new JSONArray(response.body());

                if (flightsArray.length() > 0) {
                    // Create an array of flight options
                    Flight[] flights = new Flight[flightsArray.length()];
                    for (int i = 0; i < flightsArray.length(); i++) {
                        JSONObject flightObj = flightsArray.getJSONObject(i);
                        long id = flightObj.getLong("id");
                        String airline = flightObj.getString("airline");
                        String departureAirport = flightObj.getJSONObject("departureAirport").getString("name");
                        String arrivalAirport = flightObj.getJSONObject("arrivalAirport").getString("name");
                        String departureDate = flightObj.getString("departureTime");

                        Flight flight = new Flight(id, airline, departureAirport, arrivalAirport, departureDate);
                        flights[i] = flight;
                    }

                    // Show the flight selection popup
                    Flight selectedFlight = (Flight) JOptionPane.showInputDialog(
                            null,
                            "Select Flight:",
                            "Flight Selection",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            flights,
                            flights[0]);

                    if (selectedFlight != null) {
                        return selectedFlight;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No flights available");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error retrieving flights");
            }
        } catch (IOException | InterruptedException ex) {
            JOptionPane.showMessageDialog(null, "Error retrieving flights");
            ex.printStackTrace();
        }

        return null; // Return null if no flight selected or error occurred
    }

    // Flight class to represent flight options
        record Flight(long id, String airline, String departureAirport, String arrivalAirport, String departureDate) {

        @Override
            public String toString() {
                return id + " - " + airline + " | Departure: " + departureAirport + " | Arrival: " + arrivalAirport + " | Date: " + departureDate;
            }
        }


    private void showBookingSelectionDialog(List<Bookings> bookingsList) {
        String[] options = new String[bookingsList.size()];

        for (int i = 0; i < bookingsList.size(); i++) {
            Bookings booking = bookingsList.get(i);
            String option = "Booking ID: " + booking.getId() + ", Flight ID: " + booking.getFlight().getId() + ", Seat: " + booking.getSeat();
            options[i] = option;
        }

        String selectedOption = (String) JOptionPane.showInputDialog(null, "Multiple bookings found. Please select one:", "Select Booking", JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        if (selectedOption != null) {
            int selectedIndex = -1;
            for (int i = 0; i < options.length; i++) {
                if (options[i].equals(selectedOption)) {
                    selectedIndex = i;
                    break;
                }
            }

            if (selectedIndex != -1) {
                Bookings selectedBooking = bookingsList.get(selectedIndex);
                bookingID_TextField.setText(String.valueOf(selectedBooking.getId()));
                flightID_TextField.setText(String.valueOf(selectedBooking.getFlight().getId()));
                userID_TextField.setText(String.valueOf(selectedBooking.getUser().getId()));
                seat_TextField.setText(selectedBooking.getSeat());
            }
        }
    }

    private void initializeRadioButtons() {
        ButtonGroup searchButtonGroup = new ButtonGroup();
        searchButtonGroup.add(jRadioButton1);
        searchButtonGroup.add(jRadioButton3);
    }
    private void searchUserIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchUserIDFieldActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void flightID_TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightID_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flightID_TextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | UnsupportedLookAndFeelException |
                 InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookingsManagement_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            BookingsManagement_Admin dialog = new BookingsManagement_Admin(new JFrame(), true, apiClient);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Eduard Oprea
    private JTextField searchBookingField;
    private JTextField searchUserIDField;
    private JRadioButton jRadioButton3;
    private JRadioButton jRadioButton1;
    private JTextField bookingID_TextField;
    private JTextField flightID_TextField;
    private JTextField userID_TextField;
    private JTextField seat_TextField;
    // End of variables declaration//GEN-END:variables
}
